# Methodology

1) Hardware and Software requirement:

# Hardware requirement:

Processor - Intel i5 or equivalent
RAM - 8 GB
Storage - 256 GB SSD
Display - 13 inches or larger display (Full HD)
Internet Connectivity - Required for API access and deployment
Optional - GPU (for faster embedding generation)

# Software requirement:

Operating System - Windows / Linux / macOS
Programming Language - Python 3.8+
Frameworks/Libraries - Streamlit, LangChain, HuggingFace, FAISS, Deep-Translator, Google Generative AI
IDE / Editor - VS Code / PyCharm / Jupyter Notebook
APIs - Google Gemini (Generative AI) API
Browser - Chrome / Firefox (for running UI)

2) System Design:

+-----------------------------+
|  User Interface (Streamlit)|
+-----------------------------+
              ↓
+-----------------------------+
|  Language Selection Module  |
+-----------------------------+
              ↓
+-----------------------------+
|   Translation (Input → EN)  |
| Deep Translator API         |
+-----------------------------+
              ↓
+-----------------------------+
|   Vector Database (FAISS)   |
|   + Legal Data Embedding    |
+-----------------------------+
              ↓
+-----------------------------+
| Generative AI (Gemini Pro)  |
| + Context Retrieval         |
+-----------------------------+
              ↓
+-----------------------------+
| Translation (EN → Output)   |
+-----------------------------+
              ↓
+-----------------------------+
|      Response to User       |
+-----------------------------+

3) Algorithm:

Here's a step-by-step breakdown of the algorithm used:

1. Start Application via Streamlit interface.

2. Display Language Options to the user via sidebar dropdown.

3. User Inputs Query via chat input box.

4. Translate Input to English if a regional language is selected.

5. Retrieve Context:

   -Break legal text into chunks.

   -Use FAISS vector store to retrieve relevant chunks.

6. Generate Response:

   -Construct prompt with input and context.

   -Use Google Gemini API to generate a response.

7. Translate Output back to user's selected language.

8. Display Response in the chat window.

9. Log Interaction in session memory.

10. Allow Reset Option to clear the session.
  
