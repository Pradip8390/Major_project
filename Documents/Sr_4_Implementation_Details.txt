Module 1: User Interface and Authentication

#Objective:

The primary goal of this module is to provide a user-friendly and secure entry point into the NyayaBot system. It ensures that only authorized users can access the chatbot and interact with the legal content, while also offering a clean, organized layout for usability.

#Key Functionalities:

*Web-based Interface with Streamlit:
The user interface is built using Streamlit, a lightweight Python framework that allows rapid development of web apps. The layout is responsive and intuitive, giving users a modern web experience without the need for complex front-end technologies.

*Secure Login System:
A simple yet effective login mechanism has been implemented where users must enter a valid username and password to gain access. This access control prevents unauthorized usage and can be expanded to support more complex authentication systems in the future (e.g., OAuth, Firebase).

*Sidebar Navigation and Branding:
The application features a visually appealing sidebar that includes the project title (NyayaBot), a centered image representing justice (e.g., a judge icon), and a language selection dropdown. This sidebar gives users quick access to personalization features.

*Logout and Session Handling:
A "Logout" button allows users to end their session securely. Session state is managed using Streamlit’s `st.session_state`, which helps in tracking login status and chatbot conversations across multiple interactions.

*UI Customization and Clean-Up:
Default Streamlit elements like the hamburger menu and footer are hidden for a cleaner, distraction-free user experience. This demonstrates attention to UI/UX design best practices.


Module 2: Legal Knowledge Base and Retrieval System

#Objective:

This module is designed to process and organize legal information so that it can be semantically retrieved in response to user queries. It ensures that the AI chatbot provides legally relevant, accurate, and contextual responses.

#Key Functionalities:

*Text Preprocessing and Chunking:
Legal documents are often large and complex. To manage this, the `RecursiveCharacterTextSplitter` is used to divide the legal text into   smaller, manageable chunks. This allows for efficient embedding and retrieval.

*Semantic Embedding with InLegalBERT:
Legal-specific text embeddings are generated using the **InLegalBERT** model, which is trained specifically on Indian legal documents. This ensures that the vector representation of the content preserves legal context and semantics.

*Vector Store Management using FAISS:
The processed and embedded chunks are stored in a **FAISS** (Facebook AI Similarity Search) index. FAISS is an efficient vector search library that enables fast and accurate similarity-based retrieval of documents when a user asks a legal question.

*Contextual Retrieval using LangChain:
When a user inputs a query, relevant chunks are retrieved from the FAISS store using LangChain’s `as_retriever()` interface. This dynamic retrieval ensures that the responses are tailored to the user’s query and based on actual legal texts.

*Cached Resources for Performance Optimization:
To avoid repeated computation and enhance app performance, both chunking and vector store operations are cached using Streamlit’s `@st.cache_resource` decorator.


Module 3: AI Chat Interaction and Multilingual Support

#Objective:

This module powers the core chatbot functionality, enabling users to have intelligent, legally-informed conversations with NyayaBot. It also supports multilingual interaction, allowing users from different linguistic backgrounds to receive legal assistance in their native language.

#Key Functionalities:

*Generative AI with Gemini Pro:
NyayaBot is integrated with **Google’s Gemini 1.5 Pro** model via the `google.generativeai` library. This advanced model generates high-quality, contextually relevant responses to legal queries by incorporating both user input and retrieved legal content.

*Contextual Prompting and Response Streaming:
The user query and the retrieved legal context are combined into a carefully designed prompt. The Gemini model then generates a response in a streaming fashion, enhancing the interactive feel of the chatbot by simulating typing.

*Multilingual Output via Google Translate:
To break language barriers, NyayaBot supports output translation into over 15 Indian languages using the **Google Translator API**. Users can select their preferred language from a dropdown, and responses are automatically translated in real time.

*Conversation Memory:
LangChain’s `ConversationBufferWindowMemory` is used to maintain a short-term memory of past interactions. This allows the bot to understand the context of follow-up questions, providing a more natural and human-like dialogue experience.

*User Interaction Flow:

  * Users type their queries in a chat box.
  * Messages appear in real-time bubbles (user and assistant roles are clearly marked).
  * Disclaimers are displayed to remind users that responses should be double-checked for legal accuracy.
  * A "Reset Conversation" button is available to clear previous messages and start fresh.

*Safety, Accessibility, and Usability:
The system includes a gentle legal disclaimer at the top of each response, reminding users to verify the information before acting on it. The clean layout, minimal design, and easy-to-use features make it suitable for users of varying technical backgrounds.


